<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">

    <t t-name="mail.messaging.component.Discuss" owl="1">
        <div class="o_Discuss"
            t-att-class="{
                'o-adding-item': state.isAddingChannel or state.isAddingChat,
                'o-mobile': storeProps.isMobile,
            }"
        >
            <t t-if="!storeProps.isMessagingInitialized">
                <div class="o_Discuss_messagingNotInitialized"><i class="o_Discuss_messagingNotInitializedIcon fa fa-spinner fa-spin"/>Please wait...</div>
            </t>
            <t t-else="">
                <t t-if="!storeProps.isMobile">
                    <DiscussSidebar
                        class="o_Discuss_sidebar"
                        activeThreadLocalId="discuss.activeThreadLocalId"
                        isAddingChannel="state.isAddingChannel"
                        isAddingChat="state.isAddingChat"
                        onAddChannelAutocompleteSelect="_onAddChannelAutocompleteSelect"
                        onAddChannelAutocompleteSource="_onAddChannelAutocompleteSource"
                        onAddChatAutocompleteSelect="_onAddChatAutocompleteSelect"
                        onAddChatAutocompleteSource="_onAddChatAutocompleteSource"
                        t-on-o-discuss-adding-channel="_onSidebarAddingChannel"
                        t-on-o-discuss-adding-chat="_onSidebarAddingChat"
                        t-on-o-discuss-cancel-adding-item="_onSidebarCancelAddingItem"
                        t-on-o-select-thread="_onSelectThread"
                        t-ref="sidebar"
                    />
                </t>
                <t t-if="storeProps.isMobile" t-call="mail.messaging.component.Discuss.Content"/>
                <t t-else="">
                    <div class="o_Discuss_content">
                        <t t-call="mail.messaging.component.Discuss.Content"/>
                    </div>
                </t>
            </t>

            <t t-if="state.hasModerationDiscardDialog">
                <ModerationDiscardDialog messageLocalIds="storeProps.checkedMessageLocalIds" t-on-dialog-closed="_onDialogClosedModerationDiscard"/>
            </t>
            <t t-if="state.hasModerationRejectDialog">
                <ModerationRejectDialog messageLocalIds="storeProps.checkedMessageLocalIds" t-on-dialog-closed="_onDialogClosedModerationReject"/>
            </t>
        </div>
    </t>

    <t t-name="mail.messaging.component.Discuss.Content" owl="1">
        <t t-if="storeProps.isMobile and discuss.activeMobileNavbarTabId === 'mailbox'">
            <DiscussMobileMailboxSelection
                class="o_Discuss_mobileMailboxSelection"
                activeThreadLocalId="discuss.activeThreadLocalId"
                t-on-o-select-thread="_onSelectThread"
            />
        </t>
        <t t-if="storeProps.isMobile and (state.isAddingChannel or state.isAddingChat)">
            <div class="o_Discuss_mobileAddItemHeader">
                <AutocompleteInput
                    class="o_Discuss_mobileAddItemHeaderInput"
                    isFocusOnMount="true"
                    isHtml="state.isAddingChannel"
                    placeholder="state.isAddingChannel ? addChannelInputPlaceholder : addChatInputPlaceholder"
                    select="_onMobileAddItemHeaderInputSelect"
                    source="_onMobileAddItemHeaderInputSource"
                    t-on-o-hide="_onHideMobileAddItemHeader"
                />
            </div>
        </t>
        <t t-if="(storeProps.isMobile and discuss.activeMobileNavbarTabId === 'mailbox' and discuss.activeThreadLocalId and storeProps.activeThread._model === 'mail.box') or (!storeProps.isMobile and discuss.activeThreadLocalId)">
            <ThreadViewer
                class="o_Discuss_thread"
                t-att-class="{ 'o-mobile': storeProps.isMobile }"
                composerAttachmentsDetailsMode="'card'"
                domain="discuss.domain"
                hasComposer="storeProps.activeThread._model !== 'mail.box'"
                hasComposerCurrentPartnerAvatar="!storeProps.isMobile"
                hasMessageCheckbox="true"
                hasSquashCloseMessages="storeProps.activeThread._model !== 'mail.box'"
                haveMessagesAuthorRedirect="storeProps.activeThread.channel_type !== 'chat'"
                haveMessagesMarkAsReadIcon="storeProps.activeThread.localId === 'mail.box_inbox'"
                haveMessagesReplyIcon="storeProps.activeThread.localId === 'mail.box_inbox'"
                messageListInitialScrollTop="
                    state.threadCachesStoredScrollTop[storeProps.activeThreadCacheLocalId] and
                    state.threadCachesStoredScrollTop[storeProps.activeThreadCacheLocalId].value
                "
                selectedMessageLocalId="state.replyingToMessageMessageLocalId"
                threadLocalId="discuss.activeThreadLocalId"
                t-on-o-rendered="_onThreadRendered"
                t-on-o-reply-message="_onReplyMessage"
                t-ref="thread"
            />
        </t>
        <t t-if="!discuss.activeThreadLocalId and (!storeProps.isMobile or discuss.activeMobileNavbarTabId === 'mailbox')">
            <div class="o_Discuss_noThread">
                No conversation selected.
            </div>
        </t>
        <t t-if="storeProps.isMobile and discuss.activeMobileNavbarTabId !== 'mailbox'">
            <NotificationList
                class="o_Discuss_notificationList"
                filter="discuss.activeMobileNavbarTabId"
                t-on-o-select-thread="_onSelectThread"
            />
        </t>
        <t t-if="storeProps.isMobile and !state.isReplyingToMessage">
            <MobileMessagingNavbar
                class="o_Discuss_mobileNavbar"
                activeTabId="discuss.activeMobileNavbarTabId"
                tabs="mobileNavbarTabs()"
                t-on-o-select-mobile-messaging-navbar-tab="_onSelectMobileNavbarTab"
            />
        </t>
        <t t-if="state.isReplyingToMessage">
            <Composer
                class="o_Discuss_replyingToMessageComposer"
                composerLocalId="env.store.state.threads[state.replyingToMessageThreadLocalId].composerLocalId"
                focusCounter="state.replyingToMessageCounter"
                hasCurrentPartnerAvatar="!storeProps.isMobile"
                hasDiscardButton="true"
                hasThreadName="true"
                isDiscardOnClickAway="true"
                isFocusOnMount="true"
                t-on-o-discarded="_onReplyingToMessageComposerDiscarded"
                t-on-o-message-posted="_onReplyingToMessageMessagePosted"
                t-ref="replyingToMessageComposer"
            />
        </t>
    </t>

    <!--
        @param {string} searchVal
    -->
    <t t-name="mail.messaging.component.Discuss.AutocompleteChannelPrivateItem" owl="1">
        <strong>Create <em><span class="fa fa-lock"/><t t-esc="searchVal"/></em></strong>
    </t>

    <!--
        @param {string} searchVal
    -->
    <t t-name="mail.messaging.component.Discuss.AutocompleteChannelPublicItem" owl="1">
        <strong>Create <em><span class="fa fa-hashtag"/><t t-esc="searchVal"/></em></strong>
    </t>

</templates>

<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">

    <div
        class="o_Discuss"
        owl="1"
        t-att-class="{
            'o-adding-item': state.isAddingChannel or state.isAddingChat,
            'o-mobile': props.isMobile,
        }"
        t-att-data-id="id"
        t-name="mail.component.Discuss">
        <Sidebar
            activeThreadLocalId="props.activeThreadLocalId"
            addItemChannelInputPlaceholder="addItemChannelInputPlaceholder"
            addItemChatInputPlaceholder="addItemChatInputPlaceholder"
            class="o_Discuss_sidebar"
            isAddingChannel="state.isAddingChannel"
            isAddingChat="state.isAddingChat"
            onAddChannelAutocompleteSelect="_onAddChannelAutocompleteSelect"
            onAddChannelAutocompleteSource="_onAddChannelAutocompleteSource"
            onAddChatAutocompleteSelect="_onAddChatAutocompleteSelect"
            onAddChatAutocompleteSource="_onAddChatAutocompleteSource"
            t-if="!props.isMobile"
            t-on-o-discuss-adding-channel.stop="_onSidebarAddingChannel"
            t-on-o-discuss-adding-chat.stop="_onSidebarAddingChat"
            t-on-o-discuss-cancel-adding-item.stop="_onSidebarCancelAddingItem"
            t-on-o-select-thread="_onSelectThread"
            t-ref="sidebar"/>
        <t t-if="props.isMobile" t-call="mail.component.DiscussContent"/>
        <div
            class="o_Discuss_content"
            t-else="">
            <t t-call="mail.component.DiscussContent"/>
        </div>
    </div>

    <t
        owl="1"
        t-name="mail.component.DiscussContent">
        <MobileMailboxSelection
            activeThreadLocalId="props.activeThreadLocalId"
            class="o_Discuss_mobileMailboxSelection"
            t-if="
                props.isMobile and
                props.activeMobileNavbarTabId === 'mailbox' and
                (
                    !props.activeThread or
                    props.activeThread._model === 'mail.box'
                )"
            t-on-o-select-thread="_onSelectThread"/>
        <div
            class="o_Discuss_mobileAddItemHeader"
            t-if="props.isMobile and
                (
                    state.isAddingChannel or
                    state.isAddingChat
                )">
            <AutocompleteInput
                class="o_Discuss_mobileAddItemHeaderInput"
                isFocusOnMount="true"
                isHtml="state.isAddingChannel"
                placeholder="state.isAddingChannel
                    ? addChannelInputPlaceholder
                    : addChatInputPlaceholder"
                select="_onMobileAddItemHeaderInputSelect"
                source="_onMobileAddItemHeaderInputSource"
                t-on-o-hide.stop="_onHideMobileAddItemHeader"/>
        </div>
        <Thread
            areComposerAttachmentsEditable="true"
            class="o_Discuss_thread"
            composerAttachmentLayout="'card'"
            domain="props.domain"
            hasComposer="props.activeThread._model !== 'mail.box'"
            hasComposerCurrentPartnerAvatar="!props.isMobile"
            hasSquashCloseMessages="props.activeThread._model !== 'mail.box'"
            haveComposerAttachmentsLabelForCardLayout="true"
            haveMessagesAuthorRedirect="props.activeThread.channel_type !== 'chat'"
            haveMessagesMarkAsReadIcon="props.activeThread.localId === 'mail.box_inbox'"
            haveMessagesReplyIcon="props.activeThread.localId === 'mail.box_inbox'"
            scrollTop="state.threadCachesStoredScrollTop[props.activeThreadCacheLocalId]"
            selectedMessageLocalId="state.replyingToMessageMessageLocalId"
            threadLocalId="props.activeThreadLocalId"
            t-att-class="{
                'o-mobile': props.isMobile,
            }"
            t-if="
                (
                    props.isMobile and
                    props.activeMobileNavbarTabId === 'mailbox' and
                    props.activeThreadLocalId
                ) or
                (
                    !props.isMobile and
                    props.activeThreadLocalId
                )"
            t-key="props.activeThreadLocalId + (props.isMobile ? '_mobile' : '')"
            t-on-o-redirect="_onRedirect"
            t-on-o-rendered="_onThreadRendered"
            t-on-o-reply-message.stop="_onReplyMessage"
            t-ref="thread"/>
        <div
            class="o_Discuss_noThread"
            t-if="
                !props.activeThreadLocalId and
                (
                    !props.isMobile or
                    props.activeMobileNavbarTabId === 'mailbox'
                )">
            No conversation selected.
        </div>
        <ThreadPreviewList
            class="o_Discuss_threadPreviewList"
            filter="props.activeMobileNavbarTabId"
            targetThreadLocalId="props.targetThreadLocalId"
            t-if="
                props.isMobile and
                !props.activeThreadLocalId and
                props.activeMobileNavbarTabId !== 'mailbox'"
            t-key="props.activeMobileNavbarTabId"
            t-on-o-select-thread="_onSelectThread"
            t-ref="threadPreviewList"/>
        <MobileNavbar
            activeTabId="props.activeMobileNavbarTabId"
            class="o_Discuss_mobileNavbar"
            tabs="mobileNavbarTabs"
            t-if="
                props.isMobile and
                (
                    !props.activeThreadLocalId or
                    props.activeThread._model === 'mail.box'
                ) and
                !state.isReplyingToMessage"
            t-on-o-select-mobile-messaging-navbar-tab.stop="_onSelectMobileNavbarTab"/>
        <Composer
            class="o_Discuss_replyingToMessageComposer"
            focusCounter="state.replyingToMessageCounter"
            hasCurrentPartnerAvatar="!props.isMobile"
            hasDiscardButton="true"
            hasThreadName="true"
            id="id + '_replyingToMessageComposer'"
            isFocusOnMount="true"
            threadLocalId="state.replyingToMessageThreadLocalId"
            t-if="state.isReplyingToMessage"
            t-key="'replyingToMessageComposer' + (props.isMobile ? '_mobile' : '')"
            t-on-o-discarded.stop="_onReplyingToMessageComposerDiscarded"
            t-on-o-message-posted="_onReplyingToMessageMessagePosted"
            t-ref="replyingToMessageComposer"/>
    </t>

    <!--
        @param {string} searchVal
    -->
    <strong
        owl="1"
        t-name="mail.component.Discuss.AutocompleteChannelPrivateItem">Create <em><span
            class="
                fa
                fa-lock"/><t t-esc="searchVal"/></em></strong>

    <!--
        @param {string} searchVal
    -->
    <strong
        owl="1"
        t-name="mail.component.Discuss.AutocompleteChannelPublicItem">Create <em><span
            class="
                fa
                fa-hashtag"/><t t-esc="searchVal"/></em></strong>

</templates>
